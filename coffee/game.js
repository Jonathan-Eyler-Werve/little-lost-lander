// Generated by CoffeeScript 1.7.1
var Building, FRAMERATE, FireTower, INTERVAL, addMenus, clearCanvas, drawCollection, drawEverything, drawOne, endGame, generateTerrain, imgBase, levelLoop, menuCode, removeMenus, runLevel, runTests, setAlias, setSizes, startLoop, toGrid,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

FRAMERATE = 1;

INTERVAL = 1000 / FRAMERATE;

imgBase = new Image(50, 50);

imgBase.src = "images/icon_18231.svg";

window.game = {
  towers: [],
  movers: [],
  terrain: []
};

menuCode = "<div id='startMenu'> <p>Hello game, this is game.</p> <a href='#' class='menuLinkOne'>Start level one.</a> </div>";

removeMenus = function() {
  console.log("removeMenus runs");
  if ($("#startMenu").length === 0) {
    console.log("removeMenus warning: no #startMenu to remove");
  }
  if ($("#startMenu").length > 0) {
    return $("#startMenu").remove();
  }
};

addMenus = function() {
  console.log("addMenus runs");
  if ($("#startMenu").length > 0) {
    console.log("addMenus warning: #startMenu already exists");
  }
  if ($("#startMenu").length === 0) {
    $('#menu').append(function() {
      return menuCode;
    });
    return $('.menuLinkOne').on('click', function() {
      return runLevel(100);
    });
  }
};

setSizes = function() {
  console.log("setSizes runs");
  window.game.canvas.width = $(window).width();
  return window.game.canvas.height = $(window).height();
};

$(window).resize(function() {
  return setSizes();
});

runLevel = function(levelName) {
  console.log("runLevel runs level:", levelName);
  window.game.currentLevel = levelName;
  this.loopCounter = 0;
  console.log("runLevel sets game.loopCounter to", loopCounter);
  window.game.canvas = document.getElementById("canvas");
  console.log("runLevel creates new window.game.canvas:", window.game.canvas);
  removeMenus();
  generateTerrain();
  console.log(window.game.status);
  if (window.game.status === "start") {
    return startLoop();
  } else {
    return window.game.status = "running";
  }
};

startLoop = function() {
  console.log("startLoop runs");
  window.game.status = "running";
  return setInterval(levelLoop, INTERVAL);
};

levelLoop = function() {
  if (window.game.currentLevel === 100 && window.game.status === "running") {
    if (this.loopCounter === 2) {
      this.towers[0] = new FireTower(window.game.center.x, window.game.center.y);
    }
    if (this.loopCounter >= 5) {
      window.game.status = "endLevel";
    }
    if (window.game.status === "endLevel") {
      endGame();
    }
    console.log("level 100 is ", window.game.status, "at loop", this.loopCounter);
  }
  if (window.game.status === "running") {
    this.loopCounter += 1;
    console.log("levelLoop is active. status =", window.game.status);
    console.log("loopCounter =", this.loopCounter);
    return drawEverything();
  }
};

endGame = function() {
  console.log("endGame runs");
  drawEverything();
  window.game.status = "paused";
  this.towers.pop(this.towers.length);
  return addMenus();
};

drawEverything = function() {
  var _centerX, _centerY;
  console.log("drawEverything runs");
  _centerX = toGrid(window.game.canvas.width / 2);
  _centerY = toGrid(window.game.canvas.height / 2);
  window.game.center = {
    x: _centerX,
    y: _centerY
  };
  clearCanvas(window.game.canvas);
  return drawCollection(towers);
};

drawOne = function(thing) {
  return console.log("drawOne runs for ", thing);
};

drawCollection = function(collection) {
  var thing, _i, _len, _results;
  console.log("drawCollection for", collection);
  _results = [];
  for (_i = 0, _len = collection.length; _i < _len; _i++) {
    thing = collection[_i];
    _results.push(drawOne(thing));
  }
  return _results;
};

clearCanvas = function() {
  window.game.context.clearRect(0, 0, window.game.canvas.width, window.game.canvas.height);
  return window.game.context.fillStyle = "rgba(0, 255, 0, 1)";
};

toGrid = function(location) {
  return Math.floor(location / 50) * 50;
};

generateTerrain = function() {
  console.log("generateTerrain runs");
  return console.log("generateTerrain error: empty function");
};

Building = (function() {
  function Building(posX, posY) {
    this.posX = toGrid(posX);
    this.posY = toGrid(posY);
    this.bornCycle = this.loopCounter;
  }

  Building.prototype.drawTower = function() {
    console.log("tower.drawTower is called");
    return console.log("drawTower error: empty function");
  };

  Building.prototype.rotate = function() {
    console.log("tower.rotate is called");
    return console.log("rotate error: empty function");
  };

  return Building;

})();

FireTower = (function(_super) {
  __extends(FireTower, _super);

  function FireTower(posX, posY) {
    this.image = imgBase;
    FireTower.__super__.constructor.call(this, posX, posY);
  }

  return FireTower;

})(Building);

jQuery(function() {
  console.log("$ document ready");
  window.game = {
    loopCounter: 0,
    currentLevel: 0,
    status: "start",
    towers: [],
    movers: [],
    terrain: [],
    canvas: void 0,
    context: void 0
  };
  window.game.canvas = document.getElementById("canvas");
  window.game.context = window.game.canvas.getContext("2d");
  setAlias();
  setSizes();
  addMenus();
  return runTests();
});

setAlias = function() {
  console.log("setAlias runs");
  this.towers = window.game.towers;
  this.movers = window.game.movers;
  this.terrain = window.game.terrain;
  return this.loopCounter = window.game.loopCounter;
};

runTests = function() {
  var fireTest, testTower;
  console.log("");
  console.log("runTests() runs");
  console.log("");
  console.log("testing: game object creation");
  console.log(window.game !== void 0);
  console.log(window.game.constructor === Object);
  console.log(window.game.canvas.constructor === HTMLCanvasElement);
  console.log(window.game.status === "start", "game initializes with game.status == start");
  console.log("");
  console.log("testing: runLevel");
  this.loopCounter = 1;
  window.game.status = "running";
  runLevel();
  console.log(this.loopCounter === 0, "loopCounter is reset to 0");
  console.log("");
  window.game.status = "start";
  console.log("testing: endGame()");
  endGame();
  console.log($("#startMenu").length > 0, "endGame restores menus");
  console.log(this.towers[this.towers.length - 1] !== "foo", "endGame clears towers");
  console.log("");
  window.game.status = "start";
  console.log("testing: setAlias");
  console.log(this.towers === window.game.towers, "tower alias");
  console.log(this.terrain === window.game.terrain, "terrain alias");
  console.log(this.terrain === window.game.terrain, "movers alias");
  console.log(this.loopCounter === window.game.loopCounter, "loopCounter alias");
  console.log("");
  console.log("testing: image object creation");
  console.log(imgBase.constructor === Image);
  console.log(imgBase.src !== "");
  console.log("");
  console.log("testing setSizes()");
  setSizes();
  console.log(window.game.canvas.width !== void 0);
  console.log(window.game.canvas.height !== void 0);
  console.log(window.game.canvas.width === $(window).width());
  console.log(window.game.canvas.height === $(window).height(), "height definition = current height");
  console.log(window.game.canvas.height, $(window).height(), "heights");
  console.log("");
  console.log("testing: toGrid()");
  console.log(toGrid(0) === 0);
  console.log(toGrid(1) === 0);
  console.log(toGrid(50) === 50);
  console.log(toGrid(51) === 50);
  console.log(toGrid(999999999999999) === 999999999999950);
  console.log(toGrid(-1) === -50);
  console.log(toGrid(-51) === -100);
  console.log("");
  console.log("testing: draw()");
  console.log(window.game.canvas.constructor === HTMLCanvasElement, "canvas exists");
  console.log(window.game.context.constructor === CanvasRenderingContext2D, "context exists");
  console.log("");
  console.log("testing: towers collection");
  testTower = {
    posX: 0,
    posY: 0,
    image: imgBase
  };
  window.game.towers.push(testTower);
  console.log(towers === window.game.towers);
  console.log(towers[this.towers.length - 1].posX === 0);
  console.log(towers[this.towers.length - 1].image.src === "file:///Users/jonathan/gdrive/CODE/little-lost-lander/images/icon_18231.svg");
  console.log("");
  window.game.towers.pop(1);
  console.log("testing: class FireTower");
  fireTest = new FireTower(51, 1);
  console.log(fireTest.image === imgBase);
  console.log(fireTest.posX === 50);
  console.log(fireTest.posY === 0);
  return console.log("");
};
