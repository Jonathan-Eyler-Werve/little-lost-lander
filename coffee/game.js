// Generated by CoffeeScript 1.7.1
var FRAMERATE, INTERVAL, Tower, Turret, addMenus, draw, endGame, gameLoop, generateTerrain, imgBase, menuCode, removeMenus, runLevel, runTests, setSizes, startLoop, toGrid,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

FRAMERATE = 1;

INTERVAL = 1000 / FRAMERATE;

this.W = $(window);

imgBase = new Image(50, 50);

imgBase.src = "images/icon_18231.svg";

menuCode = "<div id='startMenu'> <p>Hello game, this is game.</p> <a href='#' class='menuLinkOne'>Start level one.</a> </div>";

removeMenus = function() {
  console.log("removeMenus runs");
  if ($("#startMenu").length === 0) {
    console.log("removeMenus warning: no #startMenu to remove");
  }
  if ($("#startMenu").length > 0) {
    return $("#startMenu").remove();
  }
};

addMenus = function() {
  console.log("addMenus runs");
  if ($("#startMenu").length > 0) {
    console.log("removeMenus warning: #startMenu already exists");
  }
  if ($("#startMenu").length === 0) {
    $('#menu').append(function() {
      return menuCode;
    });
    return $('.menuLinkOne').on('click', function() {
      return runLevel(100);
    });
  }
};

setSizes = function() {
  console.log("setSizes runs");
  W.game.canvas.width = $(window).width();
  return W.game.canvas.height = $(window).height();
};

W.resize(function() {
  return setSizes();
});

startLoop = function() {
  console.log("startLoop runs");
  return setInterval(gameLoop, INTERVAL);
};

endGame = function() {
  console.log("endGame runs");
  return addMenus();
};

runLevel = function(levelName) {
  console.log("runLevel runs level:", levelName);
  W.game.currentLevel = levelName;
  W.game.loopCounter = 0;
  console.log("runLevel sets gameLoopCounter to", W.game.loopCounter);
  W.game.canvas = document.getElementById("canvas");
  console.log("runLevel creates new W.game.canvas:", W.game.canvas);
  removeMenus();
  generateTerrain();
  if (W.game.over === false) {
    startLoop();
  }
  return W.game.over = false;
};

gameLoop = function() {
  if (W.game.currentLevel === 100 && W.game.over === false) {
    console.log("level 100 bizness logics, yo");
    towers[0] = new Tower(W.game.centerX, W.game.centerY);
    if (W.game.loopCounter >= 3) {
      W.game.over = true;
    }
    if (W.game.over === true) {
      endGame();
    }
  }
  if (W.game.over === false) {
    W.game.loopCounter += 1;
    console.log("gameLoop is active");
    console.log("W.game.loopCounter =", W.game.loopCounter);
    return draw();
  }
};

draw = function() {
  var centerX, centerY;
  console.log("draw runs");
  centerX = toGrid(W.game.canvas.width / 2);
  centerY = toGrid(W.game.canvas.height / 2);
  return W.game.center = new Object({
    x: centerX,
    y: centerY
  });
};

toGrid = function(location) {
  return Math.floor(location / 50) * 50;
};

generateTerrain = function() {
  console.log("generateTerrain runs");
  return console.log("generateTerrain error: empty function");
};

Tower = (function() {
  function Tower(posX, posY) {
    this.posX = toGrid(posX);
    this.posY = toGrid(posY);
    this.bornCycle = W.game.loopCounter;
  }

  Tower.prototype.drawTower = function() {
    console.log("tower.drawTower is called");
    return console.log("drawTower error: empty function");
  };

  Tower.prototype.rotate = function() {
    console.log("tower.rotate is called");
    return console.log("rotate error: empty function");
  };

  return Tower;

})();

Turret = (function(_super) {
  __extends(Turret, _super);

  function Turret(posX, posY) {
    this.image = imgBase;
    Turret.__super__.constructor.call(this, posX, posY);
  }

  return Turret;

})(Tower);

jQuery(function() {
  console.log("$ document ready");
  W.game = new Object({
    loopCounter: 0,
    currentLevel: 0,
    over: false,
    canvas: document.getElementById("canvas"),
    context: canvas.getContext("2d"),
    towers: []
  });
  setSizes();
  addMenus();
  return runTests();
});

runTests = function() {
  var testTower;
  console.log("");
  console.log("testing: game object creation");
  console.log(W !== void 0);
  console.log(W.game.constructor === Object);
  console.log(W.game.canvas.constructor === HTMLCanvasElement);
  console.log("");
  console.log("testing: image object creation");
  console.log(imgBase.constructor === Image);
  console.log(imgBase.src !== "");
  console.log("");
  console.log("testing setSizes()");
  console.log(W.game.canvas.width !== void 0);
  console.log(W.game.canvas.height !== void 0);
  console.log(W.game.canvas.width === $(window).width());
  console.log(W.game.canvas.height === $(window).height());
  console.log("");
  console.log("testing: toGrid()");
  console.log(toGrid(0) === 0);
  console.log(toGrid(1) === 0);
  console.log(toGrid(50) === 50);
  console.log(toGrid(51) === 50);
  console.log(toGrid(999999999999999) === 999999999999950);
  console.log(toGrid(-1) === -50);
  console.log(toGrid(-51) === -100);
  console.log("");
  console.log("testing: draw()");
  console.log("");
  console.log("testing: tower creation");
  console.log("");
  console.log("testing: tower creation");
  testTower = new Object({
    posX: 0,
    posY: 0,
    image: imgBase
  });
  W.game.towers.push(testTower);
  console.log(W.game.towers[W.game.towers.length - 1].posX === 0);
  console.log(W.game.towers[W.game.towers.length - 1].image.src === "file:///Users/jonathan/gdrive/CODE/little-lost-lander/images/icon_18231.svg");
  console.log("");
  console.log("");
  console.log("");
  return W.game.towers.pop(1);
};
